#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TrenazerHMI:server');
var http = require('http');
var d3 = require('d3');
var rs232 = require('../server_js/rs232');
var stoper = require('../server_js/stoper');
var settingss = require('../server_js/settings');
var play_sound = require('../server_js/play_sound');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Socket io configuration
 */

var io = require('socket.io')(server);
var socket_stoper;

io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });
});

server.listen(3000, function(){
  console.log('listening on *:3000');
});

io.sockets.setMaxListeners(50);

//io.on('connection', function (socket) {
//    setInterval( function() {
//      socket.emit('message', rs232.rsout());
//    }, 1 );
//});

io.on('connection', function (socket) {
  socket.on('status', function (data) {
    rs232.rs_statusSET(data);
  });
});


io.on('connection', function (socket) {
  socket.on('line_length', function (data) {
    rs232.rs_line_lengthSET(data);
  });
});

io.on('connection', function (socket) {
  socket.on('roller_dist', function (data) {
    rs232.rs_roller_distSET(data);
  });
});

io.on('connection', function (socket) {
  socket.on('interia', function (data) {
    rs232.rs_interiaSET(data);
  });
});

io.on('connection', function (socket) {
  socket.on('rs232_start', function (data) {
    rs232.rs_startSET(data)
  });
});

io.on('connection', function (socket) {
  socket.on('calib_force', function (data) {
    rs232.rs_calib_forceSET(data)
  });
});


io.on('connection', function (socket) {
  socket.on('damping_dynamic', function (data) {
    rs232.rs_damp_dynamicSET(data);
  });
});

io.on('connection', function (socket) {
  socket.on('damping_static', function (data) {
    rs232.rs_damp_staticSET(data);
  });
});

io.on('connection', function (socket) {
    setInterval( function() {
      socket.emit('stop_RED',rs232.rs_stopRED());
    }, 10 );
});


io.on('connection', function (socket) {
  setInterval( function() {
    socket.emit('induct_stat',rs232.rs_ind_sens());
    socket.emit('position',{pos: rs232.rs_positon_READ(), ind: rs232.rs_ind_sens()});
    socket.emit('stoper_time', stoper.stoper_time());
    socket.emit('phase_sens',rs232.rs_phase_sens());
    socket.emit('cycle_count',stoper.cycle_count());
  }, 10 );
});

//EXERCISE SETTINGSS---------------------------------------
//save to file
var fs = require('fs');
var REC = 0;

//Create Folder
var mkdirp = require('mkdirp');
var disk_path = "D:/";
var rec_flag = 0;


//Exercise parameters
var damping_dynamic = 0;
var damping_static = 0;
var line_l = 0;
var roller_d = 0;
var interia_m = 0;
var file_name = 0;
var folder_name = 0;
var disp1_min = 0;
var disp1_max = 0;
var disp2_min = 0;
var disp2_max = 0;
var minutes_max = 0;
var seconds_max = 0;
var cycle_max = 0;

settings = settingss.load_init();
damping_dynamic = parseInt(settings.damping_dynamic);
damping_static = parseInt(settings.damping_static);
line_l = parseInt(settings.line_l);
roller_d = parseInt(settings.roller_d);
interia_m = parseInt(settings.interia_m);
file_name = settings.file_name.toString();
folder_name = settings.folder_name.toString();
disp1_min = parseFloat(settings.disp1_min);
disp1_max = parseFloat(settings.disp1_max);
disp2_min = parseFloat(settings.disp2_min);
disp2_max = parseFloat(settings.disp2_max);
minutes_max = parseInt(settings.minutes_max);
seconds_max = parseInt(settings.seconds_max);
cycle_max = parseInt(settings.cycle_max);

settingss.settings_ee.on("settigs_load", function () {
    settings = settingss.load_act();
    damping_dynamic = parseInt(settings.damping_dynamic);
    damping_static = parseInt(settings.damping_static);
    line_l = parseInt(settings.line_l);
    roller_d = parseInt(settings.roller_d);
    interia_m = parseInt(settings.interia_m);
    file_name = settings.file_name.toString();
    folder_name = settings.folder_name.toString();
    disp1_min = parseFloat(settings.disp1_min);
    disp1_max = parseFloat(settings.disp1_max);
    disp2_min = parseFloat(settings.disp2_min);
    disp2_max = parseFloat(settings.disp2_max);
    minutes_max = parseInt(settings.minutes_max);
    seconds_max = parseInt(settings.seconds_max);
    cycle_max = parseInt(settings.cycle_max);
    stoper.stoper_max_update(settings);
});



io.on('connection', function (socket) {
  socket.on('REC', function (data) {
    console.log(data);
    REC = data;
    if (data==1){
      var datax = new Date().toISOString().replace(/T.+/,'');      // replace T with a space
      var timex = new Date();
      if (folder_name!="") {
        mkdirp(disk_path + folder_name + '/', function(err) {
        console.log("create folder good");
        });
        wstream_c = fs.createWriteStream(disk_path + folder_name +  "/" + file_name + "_" + timex.getHours() + "_" + timex.getMinutes() + "_" + timex.getSeconds() + "_ciagly" + ".txt" );
        wstream_il = fs.createWriteStream(disk_path + folder_name + "/" + file_name + "_" + timex.getHours() + "_" + timex.getMinutes() + "_" + timex.getSeconds() + "_ilosciowy" + ".txt" );
      }
      else {
        mkdirp(disk_path + datax + '/', function(err) {
          console.log("create folder good");
        });
        wstream_c = fs.createWriteStream(disk_path + datax +  "/" + file_name + "_" + timex.getHours() + "_" + timex.getMinutes() + "_" + timex.getSeconds() + "_ciagly" + ".txt" );
        wstream_il = fs.createWriteStream(disk_path + datax + "/" + file_name + "_" + timex.getHours() + "_" + timex.getMinutes() + "_" + timex.getSeconds() + "_ilosciowy" + ".txt" );
      }

    }
  });
});

//STOPER STOP
stoper.stoper_event.on("stoper_stop", function () {
  io.emit('stoper_stop', 1);
  REC = 0;
});

//DISP WHAT
var disp_selection1 = "mean_phase_acc_1"
var disp_selection2 = "time_acceleration_2"

io.on('connection', function (socket) {
  socket.on("sel_disp_1", function (data) {
    disp_selection1 = data.toString();
  });
});

io.on('connection', function (socket) {
  socket.on("sel_disp_2", function (data) {
    disp_selection2 = data.toString();
  });
});

rs232.xyz.on("someEvent", function () {
  if (REC == 1){
    wstream_c.write(parseFloat(rs232.decoded_datax[3]).toFixed(2) + '\t' + parseFloat(rs232.decoded_datax[2]).toFixed(1) + '\t' + rs232.phase + '\r\n');
    rec_flag = 1;
  }
  if (REC == 0 && rec_flag == 1){
    wstream_c.end();
    rec_flag=0;
  }
});

rs232.xyz.on("cykl", function () {
  if (REC == 1){
    wstream_il.write(parseFloat(rs232.mean_force_acc).toFixed(2) + '\t' + parseFloat(rs232.mean_force_brake).toFixed(2)
        + '\t' + parseFloat(rs232.mean_force_cycle).toFixed(2) + '\t' + rs232.time_acc_phase + '\t' + rs232.time_brake_phase
        + '\t' + rs232.time_cycle + '\t' + parseFloat(rs232.max_speed_cycle).toFixed(2) + '\t' + parseFloat(rs232.max_pos_cyc).toFixed(2)
        + '\t' + parseFloat(rs232.concetrate_pointer).toFixed(1) + '\r\n');
    rec_flag = 1;
  }
  if (REC == 0 && rec_flag == 1){
    wstream_il.end();
    rec_flag=0;
  }
  stoper.stoper_cycle();
});


//STOPER START
io.on('connection', function (socket) {
  socket.on('stopwach', function (data) {
    stoper.stoper_stat(data);
  });
});

//RANGE BELLS
io.on('connection', function (socket) {
  socket.on('range_sound1', function (data) {
    if (data==1){
      play_sound.play_end("range_up1")
    } else if (data==0){
      play_sound.play_end("range_down1")
    }
  });
});

io.on('connection', function (socket) {
  socket.on('range_sound2', function (data) {
    if (data==1){
      play_sound.play_end("range_up2")
    } else if (data==0){
      play_sound.play_end("range_down2")
    }
  });
});

//SEND LOADED DEFAULTS
io.on('connection', function (socket) {
  intervalIDx = setInterval(function () {
    socket.emit('default_sett_on',settingss.load_act())
    clearInterval(intervalIDx);
  } ,10)});

//SAVE_SETTINGS
io.on('connection', function (socket) {
  socket.on('settings', function (data) {
  console.log(data)
  settingss.save(data)
  socket.emit('settings_ex',data)
  });
});

//SETTINGS_UPDATE_REQ
io.on('connection', function (socket) {
  socket.on("sett_upd_req", function (data) {
    socket.emit('settings_ex',settingss.load_act());
  })
});

//Settings updated return
io.on('connection', function (socket) {
  socket.on("sett_upd_ex_val", function (data) {
    settingss.update(data)
  })});

//SETTINGS_line req
io.on('connection', function (socket) {
  socket.on('calib_req', function (data) {
    socket.emit('line_values',settingss.load_act());
  })
});

rs232.xyz.on("cykl", function () {
  console.log("kaczki")
  switch (disp_selection1) {
    case "mean_phase_acc_1":
      io.emit('disp_bar1', parseFloat(rs232.mean_force_acc).toFixed(2) + " N");
      io.emit('procent1', {
        data1: parseFloat(rs232.mean_force_acc).toFixed(2),
        data2: disp1_min,
        data3: disp1_max
      });
      break;
    case "mean_phase_brake_1":
      io.emit('disp_bar1', parseFloat(rs232.mean_force_brake).toFixed(2) + " N");
      io.emit('procent1', {
        data1: parseFloat(rs232.mean_force_brake).toFixed(2),
        data2: disp1_min,
        data3: disp1_max
      });
      break;
    case "mean_cycle_1":
      io.emit('disp_bar1', parseFloat(rs232.mean_force_cycle).toFixed(2) + " N");
      io.emit('procent1', {
        data1: parseFloat(rs232.mean_force_cycle).toFixed(2),
        data2: disp1_min,
        data3: disp1_max
      });
      break;
    case "time_acceleration_1":
      io.emit('disp_bar1', parseFloat(rs232.time_acc_phase).toFixed(2) + " ms");
      io.emit('procent1', {
        data1: parseFloat(rs232.time_acc_phase).toFixed(2),
        data2: disp1_min,
        data3: disp1_max
      });
      break;
    case "time_brake_1":
      io.emit('disp_bar1', parseFloat(rs232.time_brake_phase).toFixed(2) + " ms");
      io.emit('procent1', {
        data1: parseFloat(rs232.time_brake_phase).toFixed(2),
        data2: disp1_min,
        data3: disp1_max
      });
      break;
    case "time_cycle_1":
      io.emit('disp_bar1', parseFloat(rs232.time_cycle).toFixed(2) + " ms");
      io.emit('procent1', {data1: parseFloat(rs232.time_cycle).toFixed(2), data2: disp1_min, data3: disp1_max});
      break;
    case "max_spped_cycle_1":
      io.emit('disp_bar1', parseFloat(rs232.max_speed_cycle).toFixed(2) + " m/s");
      io.emit('procent1', {
        data1: parseFloat(rs232.mean_force_acc).toFixed(2),
        data2: disp1_min,
        data3: disp1_max
      });
      break;
    case "max_length_cycle_1":
      io.emit('disp_bar1', parseFloat(rs232.max_pos_cyc).toFixed(1) + " cm");
      io.emit('procent1', {
        data1: parseFloat(rs232.max_pos_cyc).toFixed(2),
        data2: disp2_min,
        data3: disp2_max
      });
      break;
    case "max_power_cycle_1":
      io.emit('disp_bar1', parseFloat(rs232.concetrate_pointer).toFixed(2) + "");
      io.emit('procent1', {
        data1: parseFloat(rs232.concetrate_pointer).toFixed(2),
        data2: disp1_min,
        data3: disp1_max
      });
      break;
    default:
      io.emit('disp_bar1', parseFloat(rs232.mean_force_acc).toFixed(2) + "d");
      io.emit('procent1', {
        data1: parseFloat(rs232.mean_force_acc).toFixed(2),
        data2: disp1_min,
        data3: disp1_max
      });
  }
  //display 2 select
  switch (disp_selection2) {
    case "mean_phase_acc_2":
      io.emit('disp_bar2', parseFloat(rs232.mean_force_acc).toFixed(2) + " N");
      io.emit('procent2', {
        data1: parseFloat(rs232.mean_force_acc).toFixed(2),
        data2: disp2_min,
        data3: disp2_max
      });
      break;
    case "mean_phase_brake_2":
      io.emit('disp_bar2', parseFloat(rs232.mean_force_brake).toFixed(2) + " N");
      io.emit('procent2', {
        data1: parseFloat(rs232.mean_force_brake).toFixed(2),
        data2: disp2_min,
        data3: disp2_max
      });
      break;
    case "mean_cycle_2":
      io.emit('disp_bar2', parseFloat(rs232.mean_force_cycle).toFixed(2) + " N");
      io.emit('procent2', {
        data1: parseFloat(rs232.mean_force_cycle).toFixed(2),
        data2: disp2_min,
        data3: disp2_max
      });
      break;
    case "time_acceleration_2":
      io.emit('disp_bar2', parseFloat(rs232.time_acc_phase).toFixed(2) + " ms");
      io.emit('procent2', {
        data1: parseFloat(rs232.time_acc_phase).toFixed(2),
        data2: disp2_min,
        data3: disp2_max
      });
      break;
    case "time_brake_2":
      io.emit('disp_bar2', parseFloat(rs232.time_brake_phase).toFixed(2) + " ms");
      io.emit('procent2', {
        data1: parseFloat(rs232.time_brake_phase).toFixed(2),
        data2: disp2_min,
        data3: disp2_max
      });
      break;
    case "time_cycle_2":
      io.emit('disp_bar2', parseFloat(rs232.time_cycle).toFixed(2) + " ms");
      io.emit('procent2', {data1: parseFloat(rs232.time_cycle).toFixed(2), data2: disp2_min, data3: disp2_max});
      break;
    case "max_spped_cycle_2":
      io.emit('disp_bar2', parseFloat(rs232.max_speed_cycle).toFixed(2) + " m/s");
      io.emit('procent2', {
        data1: parseFloat(rs232.mean_force_acc).toFixed(2),
        data2: disp2_min,
        data3: disp2_max
      });
      break;
    case "max_length_cycle_2":
      io.emit('disp_bar2', parseFloat(rs232.max_pos_cyc).toFixed(1) + " cm");
      io.emit('procent2', {
        data1: parseFloat(rs232.max_pos_cyc).toFixed(2),
        data2: disp2_min,
        data3: disp2_max
      });
      break;
    case "max_power_cycle_2":
      io.emit('disp_bar2', parseFloat(rs232.concetrate_pointer).toFixed(2) + "");
      io.emit('procent2', {
        data1: parseFloat(rs232.concetrate_pointer).toFixed(2),
        data2: disp2_min,
        data3: disp2_max
      });
      break;
    default:
      io.emit('disp_bar2', parseFloat(rs232.mean_force_acc).toFixed(2) + "d");
      io.emit('procent2', {
        data1: parseFloat(rs232.mean_force_acc).toFixed(2),
        data2: disp2_min,
        data3: disp2_max
      });
  }
});