#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TrenazerHMI:server');
var http = require('http');
var d3 = require('d3');
var rs232 = require('../server_js/rs232');
//var writetxt = require('../server_js/str_write');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Socket io configuration
 */

var io = require('socket.io')(server);
io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });
});

server.listen(3000, function(){
  console.log('listening on *:3000');
});

io.sockets.setMaxListeners(50);

//io.on('connection', function (socket) {
//    setInterval( function() {
//      socket.emit('message', rs232.rsout());
//    }, 1 );
//});

io.on('connection', function (socket) {
  socket.on('status', function (data) {
    rs232.rs_statusSET(data);
    //console.log(data);
  });
});

io.on('connection', function (socket) {
  socket.on('line_length', function (data) {
    rs232.rs_line_lengthSET(data);
    //console.log(data);
  });
});

io.on('connection', function (socket) {
  socket.on('roller_dist', function (data) {
    rs232.rs_roller_distSET(data);
    //console.log(data);
  });
});

io.on('connection', function (socket) {
  socket.on('interia', function (data) {
    rs232.rs_interiaSET(data);
    //console.log(data);
  });
});

io.on('connection', function (socket) {
  socket.on('rs232_start', function (data) {
    rs232.rs_startSET(data)
  });
});

io.on('connection', function (socket) {
    setInterval( function() {
      socket.emit('stop_RED',rs232.rs_stopRED());
    }, 10 );
});

io.on('connection', function (socket) {
  setInterval( function() {
    socket.emit('phase_sens',rs232.rs_phase_sens());
  }, 10 );
});

io.on('connection', function (socket) {
  setInterval( function() {
    socket.emit('induct_stat',rs232.rs_ind_sens());
    //console.log(rs232.rs_ind_sens());
    socket.emit('position',{pos: rs232.rs_positon_READ(), ind: rs232.rs_ind_sens()});
    //console.log(rs232.rs_positon_READ());
  }, 100 );
});


//save to file
var fs = require('fs');
var REC = 0;


var wstream;

//Create Folder
var mkdirp = require('mkdirp');
var disk_path = "D:/";
var rec_flag = 0;
var folder_name = "";

//folder name
io.on('connection', function (socket) {
  socket.on('folder_name', function (data) {
    folder_name=data;
  });
});

//File name
var file_name ="";
io.on('connection', function (socket) {
  socket.on('file_name', function (data) {
    file_name=data;
  });
});


io.on('connection', function (socket) {
  socket.on('REC', function (data) {
    console.log(data);
    REC = data;
    if (data==1){
      var datax = new Date().toISOString().replace(/T.+/,'');      // replace T with a space
      var timex = new Date();
      mkdirp(disk_path + folder_name + '/' + datax + '/', function(err) {
        console.log("create folder good");
      });
      wstream_c = fs.createWriteStream(disk_path + folder_name + '/' + datax + "/" + file_name + "_" + timex.getHours() + "_" + timex.getMinutes() + "_" + timex.getSeconds() + "_ciagly" + ".txt" );
      wstream_il = fs.createWriteStream(disk_path + folder_name + '/' + datax + "/" + file_name + "_" + timex.getHours() + "_" + timex.getMinutes() + "_" + timex.getSeconds() + "_ilosciowy" + ".txt" );
    }
  });
});

//DISP RANGE
var disp_min = 0;
var disp_max = 100;

io.on('connection', function (socket) {
  socket.on('disp_min', function (data) {
    disp_min=data;
  });
  socket.on('disp_max', function (data) {
    disp_max=data;
  });
});

//DISP WHAT
var disp_selection1 = "mean_phase_acc_1"

io.on('connection', function (socket) {
  socket.on("sel_disp_1", function (data) {
    disp_selection1 = data.toString();
    console.log(data);
  });
});

rs232.xyz.on("someEvent", function () {
  if (REC == 1){
    wstream_c.write(parseFloat(rs232.decoded_datax[3]).toFixed(2) + "    " + parseFloat(rs232.decoded_datax[2]).toFixed(1) + '    ' + rs232.phase + '\r\n');
    rec_flag = 1;
  }
  if (REC == 0 && rec_flag == 1){
    wstream_c.end();
    rec_flag=0;
  }
});

io.on('connection', function (socket) {
rs232.xyz.on("cykl", function () {
  if (REC == 1){
    wstream_il.write(parseFloat(rs232.mean_force_acc).toFixed(2) + "    " + parseFloat(rs232.mean_force_brake).toFixed(2) + "    " + parseFloat(rs232.mean_force_cycle).toFixed(2) + "    " + rs232.time_acc_phase + "    " + rs232.time_brake_phase + "    " + rs232.time_cycle + '\r\n');
    rec_flag = 1;
  }
  if (REC == 0 && rec_flag == 1){
    wstream_il.end();
    rec_flag=0;
  }

  switch(disp_selection1) {
    case "mean_phase_acc_1":
      socket.emit('disp_bar', parseFloat(rs232.mean_force_acc).toFixed(2) + " N");
      socket.emit('procent', {data1: parseFloat(rs232.mean_force_acc).toFixed(2), data2: disp_min, data3: disp_max});
      break;
    case "mean_phase_brake_1":
      socket.emit('disp_bar', parseFloat(rs232.mean_force_brake).toFixed(2) + " N");
      socket.emit('procent', {data1: parseFloat(rs232.mean_force_brake).toFixed(2), data2: disp_min, data3: disp_max});
      break;
    case "mean_cycle_1":
      socket.emit('disp_bar', parseFloat(rs232.mean_force_cycle).toFixed(2) + " N");
      socket.emit('procent', {data1: parseFloat(rs232.mean_force_cycle).toFixed(2), data2: disp_min, data3: disp_max});
      break;
    case "time_acceleration_1":
      socket.emit('disp_bar', parseFloat(rs232.time_acc_phase).toFixed(2) + " ms");
      socket.emit('procent', {data1: parseFloat(rs232.time_acc_phase).toFixed(2), data2: disp_min, data3: disp_max});
      break;
    case "time_brake_1":
      socket.emit('disp_bar', parseFloat(rs232.time_brake_phase).toFixed(2) + " ms");
      socket.emit('procent', {data1: parseFloat(rs232.time_brake_phase).toFixed(2), data2: disp_min, data3: disp_max});
      break;
    case "time_cycle_1":
      socket.emit('disp_bar', parseFloat(rs232.time_cycle).toFixed(2) + " ms");
      socket.emit('procent', {data1: parseFloat(rs232.time_cycle).toFixed(2), data2: disp_min, data3: disp_max});
      break;
    case "max_spped_cycle_1":
      socket.emit('disp_bar', parseFloat(rs232.mean_force_acc).toFixed(2) + " m/s");
      socket.emit('procent', {data1: parseFloat(rs232.mean_force_acc).toFixed(2), data2: disp_min, data3: disp_max});
      break;
    case "max_power_cycle_1":
      socket.emit('disp_bar', parseFloat(rs232.mean_force_acc).toFixed(2) + " xx");
      socket.emit('procent', {data1: parseFloat(rs232.mean_force_acc).toFixed(2), data2: disp_min, data3: disp_max});
      break;
    default:
      socket.emit('disp_bar', parseFloat(rs232.mean_force_acc).toFixed(2) + "d");
      socket.emit('procent', {data1: parseFloat(rs232.mean_force_acc).toFixed(2), data2: disp_min, data3: disp_max});
  }
});
});